### c_ddl >> sql명명규칙

# MySQL 명명규칙
# : 데이터베이스, 테이블, 컬럼 명명규칙

/*
	1. 대소문자 구분이 없음
		: 일관성 있는 작성을 권장
        - 소문자로 작성 후 crtl+Shift+u 쓰면 대문자로 통일 가능
        
    2. 길이 제한
		: 최대 64자까지 사용 가능함
	
    3. 문자 제한
		: 문자, 숫자, _만 사용 가능
        - "공백", 기타 특수 기호 사용은 불가능
        
	4. 숫자로 시작할 수 없음
    
    5. MySQL 예약어는 사용 불가능하다.
		- 부득이하게 사용하는 경우 ``(백틱)으로 묶어서 사용 가능
	
*/


# ------------------------- #

# SQL 내 명명 시 '반드시' 의미있는 이름 사용 권장
# > 데이터를 정확하게 설명할 수 있는 식별자로 명명

# ------------------------- #

# 테이블 명명 규칙
# > 복수형 명사 사용 권장 
# EX) students(학생들) , lectures(강의들) , products(상품들) , members(멤버들) ....

/* 
	+) 복수형 VS 단수형
	  테이블명 복수형 
 		: 한 테이블에 여러개의 레코드(행)가 저장
			-> 의미가 직관적임
	  테이블명 단수형
		: 객체지향적인 관점에서 클래스 이름과 일치시킬 수 있음(User 클래스 - user 테이블)
			-> 테이블 하나가 하나의 엔티티 구조를 표현한다 볼수 있음
*/

# ------------------------- #

# lower_calmel_case 사용 권장
# 	EX) student_id, lecture_code, product_price, member_grade ...

# ------------------------- #

# SQL 문법(대문자 사용 권장) BUT 네이밍 방식은 소문자 사용을 권장
# CREATE DATABASE example; => 명령어랑 객체랑은 구분을 해야하니까

# ------------------------- #

/*
	SQL 백틱(``) VS 따옴표('')
	
    1. 백틱
		: 키워드 충돌 방지 
			- 예약어로 설정되어있는 단어를 명명하기 위한 목적
			EX) order(ORDER 명령어), group, select 등의 예약어를 컬럼명이나 명명 규칙에 사용하기 위해서 `` 사용
				-> SELECT `order`, `group` FROM `example`;  => 에러 안남
				-> SELECT order, group FROM example;		=> 에러 남
				
			- 대소문자 구분이 필요할 때 -> 설정에 따라 민감한 시스템에서 사용될 때 
                -> SELECT student from school;
                -> select STUDENT FROM SCHOOL;
                
			- 공백이나 특수 문자가 포함된 이름 사용시
				-> SELECT `student name` FROM `busan high school`; 
		
        >> 혹시 모를 예약어와의 충돌이나 "외부 시스템(백엔드)" 연동 시 문제 방지를 위해 백틱을 사용하는 것이 안정적임
        
	
    2. 따옴표
		: 문자열 데이터를 저장한는 데 사용됨(문자열 리터럴 표현)
			- DB, 데이블, 컬럼명으로는 사용하지 않는 것을 권장
				=> 따옴표를 사용하면 실제 데이터임을 명시하게 됨
			
            EX) SELECT 'price' FROM `products`;
					=> 가격이 칼럼이 아니라 실제 price 문자열로 인식되어버림 
                    
			
*/ 











