## k_정규화 >>> b_제 1 정규형

### 제 1 정규화 (1NF) ###
# : 정규화의 첫 단계 
# - 테이블의 모든 필드(열)가 '원자값(분할 불가능한 값)'을 가져야 한다는 규칙 
# >> 각 컬럼에 반복되는 그룹이나 다중값이 없어야함 (유일한 값을 가져야함)

# cf) 원자값 : 더 이상 쪼갤 수 없는 최소 단위의 데이터
# EX) 'IoT, 챗봇' => 문자열 안에 데이터가 2개 들어있음 -> 쪼개야함 
#			'IoT' , '챗봇' -> 이렇게 

USE normal;
create table `제1정규형`(
	학번 int,
    학생_이름 varchar(50),
    강의_이름 varchar(100)
);

-- 1NF 이전 (비정규형 예시)
# (1, '김승민' , '슬립테크, 코딩 테스트, 리눅스') => 중복 값
# (2, '정지훈' , 'IoT/DBMS') 

-- 1NF 적용 예시 
insert into 제1정규형
values
	(1, '김승민', '슬립테크'),
	(1, '김승민', '코딩테스트'),
	(1, '김승민', '리눅스'),
	(2, '정지훈', 'IoT'),
	(2, '정지훈', 'DBMS');

select * from 제1정규형;

### 제 1 정규형 장점 ### 
# 1) 데이터 무결성 보장: 모든 데이터가 명확하게 분리되어있음
# 2) 쿼리 효율성 증가: 특정 수업을 듣는 학생들을 쉽게 조회할 수 있음 
# 3) 유지보수 용이: 데이터 수정 및 관리가 용이해짐 

### 제 1 정규형 단점 ###
# 1) 조회 성능 저하 가능성: 데이터를 여러 행으로 분해 >> 조회 연산량이 증가함 
# 2) 저장 공간 증가 가능성: 같은 학생 정보(학번, 학생 이름)가 반복 저장됨 >> 중복데이터 존재 

### 제 1 정규형 핵심 조건 ###
# 1) 모든 필드는 원자값을 가져야함 
# 2) 반복 그룹(같은 종류의 데이터 묶음) 허용하지 않음
# 3) 각 행은 고유해야 함




